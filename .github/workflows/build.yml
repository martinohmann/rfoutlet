---
name: build
on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
jobs:
  build:
    strategy:
      matrix:
        go-version: [1.13.x, 1.15.x]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Setup
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Download go modules
        run: go mod download
      - name: Run go test
        run: make coverage
      - name: Run go vet
        run: go vet ./...
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
            sh -s -- -b $(go env GOPATH)/bin v1.31.0
      - name: Run golangci-lint
        run: golangci-lint run
      - name: Upload coverage
        uses: codecov/codecov-action@v1.0.14
        if: matrix.go-version == '1.15.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        if: matrix.go-version == '1.15.x' && startsWith(github.ref, 'refs/tags/')
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-web:
    defaults:
      run:
        working-directory: web
    strategy:
      matrix:
        node-version: ['15']
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Setup
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.go-version }}
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-${{ matrix.go-version }}-
      - name: Install node modules
        run: npm install
      - name: Build app
        run: npm run build
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: mohmann/rfoutlet
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          cache-from: |
            type=registry,ref=mohmann/rfoutlet:latest
            type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
